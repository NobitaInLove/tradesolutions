//==================================================================================================================================================================================================================//
//==========================={===========================//
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © guptavinayak
//@version=5
//==================================================================================================================================================================================================================//
indicator(title='TradeBots5X20', overlay=true)
//==================================================================================================================================================================================================================//

Eusl = input.bool(false, title="Enable the Extra SL shown below", group='TradeBots5X20')
usl = input.float(defval=5 , title='Value to set SL number of points below-low or above-high', minval=1, maxval=100, group='TradeBots5X20')
RiRe = input.float(defval=1,title='Risk to Reward Ratio',minval=1,maxval=25, group='TradeBots5X20')
ShowSell = input.bool(true,'Show Sell Signals', group='TradeBots5X20')
ShowBuy = input.bool(false,'Show Buy Signals', group='TradeBots5X20')
BSWCon = input.bool(defval=false, title='Buy/Sell with Extra Condition - candle close', tooltip='Extra Condition 1 : candle close greater/lesser than previous candle close, This can sometimes save you from false moves but by using this, you can also miss out on big moves as you will enter trade after candle closing instead of entering at break of high/low', group='TradeBots5X20')
// Define a struct to represent your message

ema5 = ta.ema(close,5)
pema5 = plot(ema5, '5 Ema', color=color.new(#678826, 0), linewidth=2)
ema20 = ta.ema(close,20)
pema20 = plot(ema20, '20 Ema', color=color.new(#882626, 0), linewidth=2)

shortCondition = ta.crossunder(ta.ema(close, 5), ta.ema(close, 20))
longCondition = ta.crossover(ta.ema(close, 5), ta.ema(close, 20))



// Time Filter {
// Beginning / End date filter {
g_time          = "Time Filter"
timeZone        = input.string("GMT+0", "Time Zone", group = g_time, 
     tooltip = "GMT and UTC is the same thing \nMatch this setting to bottom right time",
     options = ["GMT-10", "GMT-9", "GMT-8", "GMT-7", "GMT-6", "GMT-5", "GMT-4", "GMT-3", "GMT+0", "GMT+1", "GMT+2", "GMT+3", "GMT+4", "GMT+5","GMT+5:30", "GMT+6", "GMT+7", "GMT+8", "GMT+9", "GMT+10", "GMT+10:30", "GMT+11", "GMT+12", "GMT+13", "GMT+13:45"])
startTimeIn     = input.time(timestamp("24 Feb 2022"), "Start Date Filter", group = g_time,
     tooltip = "Changing timezone at bottom right of chart will change start time\nSet chart timezone to your prefered time first, then change indicator setting")
endTimeIn       = input.time(timestamp("01 Jan 2099"), "End Date Filter", group = g_time)

startTimeYear   = year  (startTimeIn, timeZone)
startTimeMonth  = month (startTimeIn, timeZone)
startTimeDay    = dayofmonth(startTimeIn, timeZone)
endTimeYear     = year  (endTimeIn, timeZone)
endTimeMonth    = month (endTimeIn, timeZone)
endTimeDay      = dayofmonth(endTimeIn, timeZone)

startTime   = timestamp(timeZone, startTimeYear, startTimeMonth, startTimeDay)
endTime     = timestamp(timeZone, endTimeYear, endTimeMonth, endTimeDay)
inDate      = time >= startTime and time <= endTime

// Weekdays Filter {
useWeek = input.bool(true, "Use Weekdays Filter?", group = g_time,
     tooltip = "Disable to allow all weekdays, Enable to choose certain days")
useMon  = input.bool(true, "Mon  ", inline = "Days", group = g_time)
useTue  = input.bool(true, "Tue  ", inline = "Days", group = g_time)
useWed  = input.bool(true, "Wed  ", inline = "Days", group = g_time)
useThu  = input.bool(true, "Thu  ", inline = "Days", group = g_time)
useFri  = input.bool(true, "Fri  ", inline = "Days", group = g_time)
useSat  = input.bool(true, "Sat  ", inline = "Days", group = g_time)
useSun  = input.bool(true, "Sun", inline = "Days", group = g_time)
inWeek  = if useWeek and useMon and dayofweek(time, timeZone) == dayofweek.monday
    true
else if useWeek and useTue and dayofweek(time, timeZone) == dayofweek.tuesday
    true
else if useWeek and useWed and dayofweek(time, timeZone) == dayofweek.wednesday
    true
else if useWeek and useThu and dayofweek(time, timeZone) == dayofweek.thursday
    true
else if useWeek and useFri and dayofweek(time, timeZone) == dayofweek.friday
    true
else if not(useWeek)
    true


// Session Filter {
isInSess(_sess) => time(timeframe.period, _sess, timeZone)

useSess     = input.bool(false, "Use Session Filter?", group = g_time)
timeSess1    = input.session("0915-1045", "Time Session", group = g_time)
inSess1 = isInSess(timeSess1)

useSess2    = input.bool(false, "Use 2ND Session Filter?", group = g_time)
timeSess2   = input.session("1230-1500", "Time Session 2", group = g_time)
inSess2 = isInSess(timeSess2)

inSess = if useSess and inSess1
    true
else if useSess2 and inSess2
    true
else if not (useSess)
    true
//}
// Display Time Filter --- USE VARIABLE -->"inTime"<-- AS TIME FILTER IN ANY CODE {
inTime = inDate and inWeek and inSess
bgcolor(inTime ? color.new(color.blue, 90) : na, title = "Time Filter")
//}
//}
   
var bool Short  = na
var bool Long  = na
var shortC = 0
var sslhitC = 0
var starhitC = 0
var float ssl = na
var float starl = na
var float star = na
var float sellat = na
var float alert_shorthigh = na
var float alert_shortlow = na
var line lssl = na
var line lstar = na
var line lsell = na
var label lssllbl = na
var label lstarlbl = na
var label lselllbl = na
var longC = 0
var lslhitC = 0
var ltarhitC = 0
var float lsl = na
var float ltarl = na
var float ltar = na
var float buyat = na
var float alert_longhigh = na
var float alert_longlow = na
var line llsl = na
var line lltar = na
var line lbuy = na
var label llsllbl = na
var label lltarlbl = na
var label lbuylbl = na

ShortWC = low[1] > ema5[1] and low[1] > low and shortC == 0 and close<close[1]
ShortWOC = low[1] > ema5[1] and low[1] > low and shortC == 0
Short := BSWCon ? ShortWC : ShortWOC
sslhit = high > ssl and shortC > 0 and sslhitC == 0
starhit = low < star and shortC > 0 and starhitC == 0
LongWC =  high[1] < ema5[1] and high[1] < high and longC == 0 and close>close[1]
LongWOC =  high[1] < ema5[1] and high[1] < high and longC == 0
Long := BSWCon ? LongWC : LongWOC
lslhit = low < lsl and longC > 0 and lslhitC == 0
ltarhit = high > ltar and longC > 0 and ltarhitC == 0

if shortCondition and inTime
    shortC := shortC + 1
    sslhitC := 0
    starhitC := 0
    alert_shorthigh := high[1]
    if Eusl
        ssl := high[1] + usl
        starl := BSWCon ? ((high[1] - close) + usl) * RiRe : ((high[1] - low[1]) + usl) * RiRe
    else
        ssl := high[1]
        starl := BSWCon ? (high[1] - close) * RiRe : (high[1] - low[1]) * RiRe
    star := BSWCon ? close - starl : low[1] - starl
    sellat := BSWCon ? close : low[1]
    lssl := line.new(bar_index, ssl, bar_index, ssl, color=color.new(#fc2d01,45), style=line.style_dashed)
    lstar := line.new(bar_index, star, bar_index, star, color=color.new(color.green,45), style=line.style_dashed)
    lsell := line.new(bar_index, sellat, bar_index, sellat, color=color.new(color.orange,45), style=line.style_dashed)
    lssllbl := label.new(bar_index, ssl, style=label.style_none, text='Stop Loss - Short' + ' (' + str.tostring(ssl) + ')', textcolor=color.new(#fc2d01,35), color=color.new(#fc2d01,35))
    lstarlbl := label.new(bar_index, star, style=label.style_none, text='Target - Short' + ' (' + str.tostring(star) + ')', textcolor=color.new(color.green,35), color=color.new(color.green,35))
    lselllbl := label.new(bar_index, sellat, style=label.style_none, text='Sell at' + ' (' + str.tostring(sellat) + ')', textcolor=color.new(color.orange,35), color=color.new(color.orange,35))

if sslhit == false and starhit == false and shortC > 0
    line.set_x2(lssl, bar_index)
    line.set_x2(lstar, bar_index)
    line.set_x2(lsell, bar_index)
    sslhitC := 0
    starhitC := 0
else
    if sslhit
        shortC := 0
        sslhitC := sslhitC + 1
    else
        if starhit
            shortC := 0
            starhitC := starhitC + 1

if longCondition and inTime
    longC := longC + 1
    lslhitC := 0
    ltarhitC := 0
    alert_longlow := low[1]
    if Eusl
        lsl := low[1] - usl
        ltarl := BSWCon ? ((close - low[1]) + usl) * RiRe : ((high[1] - low[1]) + usl) * RiRe
    else
        lsl := low[1]
        ltarl := BSWCon ? (close - low[1]) * RiRe : (high[1] - low[1]) * RiRe
    ltar := BSWCon ? close + ltarl : high[1] + ltarl
    buyat := BSWCon ? close : high[1]
    llsl := line.new(bar_index, lsl, bar_index, lsl, color=color.new(#fc2d01,45), style=line.style_dotted)
    lltar := line.new(bar_index, ltar, bar_index, ltar, color=color.new(color.green,45), style=line.style_dotted)
    lbuy := line.new(bar_index, buyat, bar_index, buyat, color=color.new(color.orange,45), style=line.style_dotted)
    llsllbl := label.new(bar_index, lsl, style=label.style_none, text='Stop Loss - Long' + ' (' + str.tostring(lsl) + ')', textcolor=color.new(#fc2d01,35), color=color.new(#fc2d01,35))
    lltarlbl := label.new(bar_index, ltar, style=label.style_none, text='Target - Long' + ' (' + str.tostring(ltar) + ')', textcolor=color.new(color.green,35), color=color.new(color.green,35))
    lbuylbl := label.new(bar_index, buyat, style=label.style_none, text='Buy at' + ' (' + str.tostring(buyat) + ')', textcolor=color.new(color.orange,35), color=color.new(color.orange,35))

if lslhit == false and ltarhit == false and longC > 0
    line.set_x2(llsl, bar_index)
    line.set_x2(lltar, bar_index)
    line.set_x2(lbuy, bar_index)
    lslhitC := 0
    ltarhitC := 0
else
    if lslhit
        longC := 0
        lslhitC := lslhitC + 1
    else
        if ltarhit
            longC := 0
            ltarhitC := ltarhitC + 1




if shortCondition and inTime
    // alert("Go Short@ " + str.tostring(sellat) + " : SL@ " + str.tostring(ssl) + " : Target@ " + str.tostring(star) + " ", alert.freq_once_per_bar )
    // Define the JSON message as a dictionary  
    var string jsonString = ""    
    jsonString := "{\"Action\": \"sell\", \"sellat\": " + str.tostring(sellat) + ", \"stop_loss\": " + str.tostring(ssl) + ", \"target_price\": " + str.tostring(star) + ", \"instrument_name\": \"" + syminfo.tickerid + "\"}"
    alert(jsonString, alert.freq_once_per_bar )
    //alert("++sell@" + str.tostring(sellat) + "|stop_loss@" + str.tostring(ssl) + "|target_price@" + str.tostring(star) +  "|instrument_name@" + syminfo.tickerid + "++" , alert.freq_once_per_bar_close )
if ShowSell and sslhit and inTime
    // alert("Short Stop-loss hit ", alert.freq_once_per_bar )
    alert("++sell_stop-loss_hit_price@"+str.tostring(ssl), alert.freq_once_per_bar )
if ShowSell and starhit and inTime
    // alert("Short Target hit ", alert.freq_once_per_bar )
    alert("++target_hit@sell|target_price@+"+str.tostring(star), alert.freq_once_per_bar )
if longCondition and inTime
    // alert("Go Long@ " + str.tostring(buyat) + " : SL@ " + str.tostring(lsl) + " : Target@ " + str.tostring(ltar) + " ", alert.freq_once_per_bar )
    //alert("++buy@" + str.tostring(buyat) + "|stop_loss@" + str.tostring(lsl) + "|target_price@" + str.tostring(ltar) +  "|instrument_name@" + syminfo.tickerid + "++" , alert.freq_once_per_bar_close )
    var string jsonString = "" 
    jsonString := "{\"Action\": \"sell\", \"sellat\": " + str.tostring(sellat) + ", \"stop_loss\": " + str.tostring(ssl) + ", \"target_price\": " + str.tostring(star) + ", \"instrument_name\": \"" + syminfo.tickerid + "\"}"
    alert(jsonString, alert.freq_once_per_bar )
if ShowBuy and lslhit and inTime
    // alert("Long Stop-loss hit ", alert.freq_once_per_bar )
    alert("++buy_stop-loss_hit_price@"+str.tostring(lsl), alert.freq_once_per_bar )
if ShowBuy and ltarhit and inTime
    // alert("Long Target hit ", alert.freq_once_per_bar )
    alert("++target_hit:buy@|target_price@"+str.tostring(ltar), alert.freq_once_per_bar )

plotshape(shortCondition and inTime , title='Sell', location=location.abovebar, offset=0, color=color.new(#e74c3c, 45), style=shape.arrowdown, size=size.normal, text='Sell', textcolor=color.new(#e74c3c, 55))
plotshape(ShowSell and sslhit and inTime, title='SL Hit - Short', location=location.abovebar, offset=0, color=color.new(#fc2d01, 25), style=shape.arrowdown, size=size.normal, text='SL Hit - Short', textcolor=color.new(#fc2d01, 25))
plotshape(ShowSell and starhit and inTime, title='Target Hit - Short', location=location.belowbar, offset=0, color=color.new(color.green, 45), style=shape.arrowup, size=size.normal, text='Target Hit - Short', textcolor=color.new(color.green, 55))
plotshape(longCondition and inTime, title='Buy', location=location.belowbar, offset=0, color=color.new(#2ecc71, 45), style=shape.arrowup, size=size.normal, text='Buy', textcolor=color.new(#2ecc71, 55))
plotshape(ShowBuy and lslhit and inTime, title='SL Hit - Long', location=location.belowbar, offset=0, color=color.new(#fc2d01, 25), style=shape.arrowdown, size=size.normal, text='SL Hit - Long', textcolor=color.new(#fc2d01, 25))
plotshape(ShowBuy and ltarhit and inTime, title='Target Hit - Long', location=location.abovebar, offset=0, color=color.new(color.green, 45), style=shape.arrowup, size=size.normal, text='Target Hit - Long', textcolor=color.new(color.green, 55))


//======================================================]//

//==================================================================================================================================================================================================================//